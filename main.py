from time import sleep
# from sense_hat import SenseHat
import math
import numpy as np

COLUMNS = 8
ROWS = 8
COLOR = (255, 0, 0)
center_x = COLUMNS // 2
center_y = ROWS // 2


class SenseHatMock():
    def __init__(self):
        self.arr = None
        self.clear()

    def set_pixel(self, x, y, color):
        self.arr[x, y] = 1

    def clear(self):
        print(self.arr)
        self.arr = np.zeros((COLUMNS, ROWS))


sense = SenseHatMock()


def set_pixel(x, y):
    sense.set_pixel(center_x + x, center_y + y, COLOR)


"""
    a version of the tangent function where
    tan(angle) is symmetric around tan(45deg) 
    and zero at tan(0deg) and tan(90deg)
"""


def get_continious_tan(angle):
    small_angle = angle % 45
    is_upper = abs(angle % 90) >= 45
    tan = math.tan(math.radians(small_angle))
    return 1 - tan if is_upper else tan


"""
    flips the axis generated by the continious_tangent function
    to create a continious circulat motion
"""


def make_continious(oposing, angle, tan):
    is_odd_quarter = abs(angle // 90) % 2
    is_upper = abs(angle % 90) > 45
    ajacent = int(round(oposing * tan))
    if (is_upper):
        if is_odd_quarter:
            return -ajacent, oposing
        return oposing, ajacent
    else:
        if is_odd_quarter:
            return -oposing, ajacent
        return ajacent, oposing


def draw_line(angle):
    tan = get_continious_tan(angle)
    odd_half = -1 if 180 < (angle % 360) <= 270 else 1
    for y in range(-1, ROWS // 2):
        x, y2 = make_continious(y, angle, tan)
        for offset in range(0, ROWS):
            set_pixel(x, y2 - (offset * odd_half))
            set_pixel(-x, -y2 - (offset * odd_half))
            sleep(0.01)


while True:
    sleep(1)
    sense.clear()
    draw_line(sense.get_temperature() + 30)

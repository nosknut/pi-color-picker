from time import sleep
# from sense_hat import SenseHat
import math
import numpy as np

COLUMNS = 8
ROWS = 8
COLOR = (255, 0, 0)
center_x = COLUMNS // 2
center_y = ROWS // 2


class SenseHatMock():
    def __init__(self):
        self.arr = None
        self.clear()

    def set_pixel(self, x, y, color):
        self.arr[x, y] = 1

    def clear(self):
        print(self.arr)
        self.arr = np.zeros((COLUMNS, ROWS))


sense = SenseHatMock()


def set_pixel(x, y):
    absolute_x = center_x + x
    absolute_y = center_y - y
    if (0 <= absolute_x <= (COLUMNS - 1)) and (0 <= absolute_y <= (ROWS - 1)):
        sense.set_pixel(absolute_x, absolute_y, COLOR)


"""
    a version of the tangent function where
    tan(angle) is symmetric around tan(45deg) 
    and zero at tan(0deg) and tan(90deg)
"""


def get_continious_tan(angle):
    small_angle = angle % 45
    is_upper = abs(angle % 90) >= 45
    tan = math.tan(math.radians(small_angle))
    return 1 - tan if is_upper else tan


"""
    flips the axis generated by the continious_tangent function
    to create a continious circulat motion
"""


def handle_odd_quarter(angle, x, y):
    is_odd_quarter = abs(angle // 90) % 2
    # angles in quadrant zero and two are mirrored
    # in quadrants one and three, the x value should decrease from zero, rather than decrease from max
    return (-y, x) if is_odd_quarter else (x, y)


def make_continious(ajacent, angle, tan):
    is_upper = abs(angle % 90) > 45
    oposing = int(round(ajacent * tan))
    if is_upper:
        # In the upper portion of a quadrant the x value will decrease with the tangent, while the y value will increase independently
        return handle_odd_quarter(angle, oposing, ajacent)
    # In the upper portion of a quadrant the y value will increase with the tangent, while the x value will decrease independently
    return handle_odd_quarter(angle, ajacent, oposing)


def draw_line(angle):
    tan = get_continious_tan(angle)
    odd_half = -1 if 180 < (angle % 360) <= 270 else 1
    for x in range(-(center_x + 1), (center_x + 2)):
        x2, y = make_continious(x, angle, tan)
        set_pixel(x2, y + 1)
        # for offset in range(0, ROWS):
        #     sleep(0.01)


sense.set_rotation(90)

temp = 0
while True:
    sleep(1)
    new_temp = sense.get_temperature()
    if temp != new_temp:
        sense.clear()
        temp = new_temp
        draw_line(temp + 30)
